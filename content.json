{"meta":{"title":"Hunterforesee","subtitle":"不爱BIM的非典型性码农不是一个好工程师","description":"长路漫漫，其修远兮","author":"Hunterforesee","url":"http://Hunterforesee.github.io"},"pages":[],"posts":[{"title":"HelloWorld","slug":"HelloWorld","date":"2018-10-13T16:09:15.000Z","updated":"2018-10-14T01:30:12.784Z","comments":true,"path":"2018/10/14/HelloWorld/","link":"","permalink":"http://Hunterforesee.github.io/2018/10/14/HelloWorld/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"changePath","slug":"changePath","date":"2018-10-13T15:09:05.000Z","updated":"2018-10-13T16:00:57.198Z","comments":true,"path":"2018/10/13/changePath/","link":"","permalink":"http://Hunterforesee.github.io/2018/10/13/changePath/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"hexo Github部署Blog方法：","slug":"hexo","date":"2018-10-13T01:06:12.000Z","updated":"2018-10-14T01:30:36.246Z","comments":true,"path":"2018/10/13/hexo/","link":"","permalink":"http://Hunterforesee.github.io/2018/10/13/hexo/","excerpt":"","text":"前言作为Hexo部署完成以后的第一篇文章，决定献给Hexo部署，顺便学习一下MarkDown语法。本篇为从零开始的基础篇，其他SEO、评论系统、统计等请看Hexo博客添加SEO-评论系统-阅读统计-站长统计，本篇所包含的内容如下： 参考文章：hexo从零开始到搭建完整.md即markdown文件的基本常用编写语法（图文并茂）Markdown 语法说明 (简体中文版)Hexo官网的介绍MarkDown语法汇总 基本步骤 安装Git Bash 安装NodeJs 安装hexo 生成SSH并添加到github 部署项目 上传到github 绑定个人域名 修改及配置主题 添加RSS 添加评论 写文章部分 添加Search功能 修改默认Markdown保存路径 1. 安装Git Bashwindows版本下载地址 双击下载好的exe文件，一路next就好啦 安装好后，打开gitbash，查看版本： git version 配置github账户信息（YourName和YourEail都替换成你自己的）： git config --global user.name \"YourName\"git config --global user.email \"YourEmail\" 创建SSH在gitbash中输入： ssh-keygen -t rsa -C \"youremail@example.com\" 生成ssh。 一般如果按照默认的配置，会在”C:\\Users\\Health.ssh”下面生成”id_rsa.pub”的公钥文件。如果有，该步骤已经完成 2. 安装NodeJsNodeJs安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量） 查看版本:node -v 3. 安装hexo看到这么多安装，千万不要紧张，小哥哥小姐姐们一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。 先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下。 可以直接在资源管理器中查找到该文件夹，然后点击右键，选择 “Git Bash Here”安装hexo命令： npm i -g hexo 安装完成后，查看版本： hexo -v 对该文件夹进行初始化： hexo init 初始化完成之后打开所在的文件夹可以看到一系列文件以及文件夹列表： node_modules：是依赖包 public：存放的是生成的页面 scaffolds：命令生成文章等的模板 source：用命令创建的各种文章 themes：主题 _config.yml：整个博客的配置 db.json：source解析所得到的 package.json：项目所需模块项目的配置信息 至此，配置完成 4. GitHub 创建新项目并添加SSH到GitHub 创建账号或者登陆： 创建一个新的repo，名称改为YourName.github.io,其中yourname是你的github名称,按照这个规则创建才有用哦 将前面生成的公钥文件的内容ssh放到github中点击Github里面的Settings，选择SSH and GPG keys，选择New SSH Key，将步骤1中生成的pub文件中的内容，拷贝到编辑框内，并添加相应的title。 在gitbash中验证是否添加成功 ssh -T git@github.com 建议该步骤在添加完成以后，过一会儿再操作，服务器好像有些延迟。如果返回问候语“Hi,”，证明已经连接成功 5. 部署项目 用编辑器打开你的blog项目，修改_config.yml文件中的一些配置(冒号之后都是有一个半角空格的): deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 回到gitbash中，进入你的blog目录,执行以下命令 hexo cleanhexo generatehexo server 注：hexo 3.0把服务器独立成个别模块，需要单独安装npm i hexo-server 打开浏览器输入：http://localhost:4000,如果能够正常打开页面，证明已经在本机上面部署成功了。 6. 上传到github 安装hexo-deployer-git,这样才能将你写好的文章部署到github服务器上并让别人浏览到 npm install hexo-deployer-git --save 执行部署命令：(以后每次发布新的页面都按照这个步骤进行) hexo cleanhexo generatehexo deploy 注意deploy的过程中要输入你的username及passward。（本人好像没有遇到） 在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！ 7. 绑定个人域名（略） 8. 修改及配置主题最新主题下载地址 11. 写文章 新建文章：hexo new ‘文章名’，然后你就可以在source/_posts路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。 关于具体的文章编辑你可以看下官网的介绍 至于markdown，可以自行发挥啦~ MarkDown语法汇总 12. 添加Search功能搜索功能真心好用，当文章多起来的时候，标签提供的作用已经很少了，只能简单索引，搜索却能精确查找，这里我用的依旧是最简单的本地站内搜索。npm install hexo-generator-searchdb --save 修改 站点配置 文件search: path: search.xml field: post format: html limit: 10000 修改 主题配置文件local_search: enable: true 13. 修改MarkDown保存路径有时，我们希望对markdown 文件进行统一管理，此时需要将Hexo的默认位置设置到你想要的位置上去，具体做法如下： 修改 站点配置 文件# Directorysource_dir: E:\\Notes\\Hexo_Blog\\#source_dir: source 图片插入方法：对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] &quot;title&quot; 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。本地图片引用方法： 方式一：采用标准的MarkDown格式进行引用，好处是各种编辑器都可以直接对图片进行识别 ![连接](HelloWorld/HelloWorld.jpg) 方式二：采用Hexo方式进行应用，该方法的话无法在各种编辑器中进行显示，比较不直观. &#123;% asset_img HelloWorld.png 此图片通过Hexo的语法添加 %&#125;","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://Hunterforesee.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://Hunterforesee.github.io/tags/github/"},{"name":"blog","slug":"blog","permalink":"http://Hunterforesee.github.io/tags/blog/"}]},{"title":"Python入门笔记以及框架介绍","slug":"HelloPython","date":"2018-10-10T03:48:59.000Z","updated":"2018-10-13T07:32:34.420Z","comments":true,"path":"2018/10/10/HelloPython/","link":"","permalink":"http://Hunterforesee.github.io/2018/10/10/HelloPython/","excerpt":"","text":"基本内容开发环境：IDE：VS Community / Pycharm / VS Code安装包：NULL / Anaconda / Python Anaconda 对库进行维护anaconda prompt 运行python;安装完anaconda以后，需要对库进行更新，一般更新分为两步： 升级自己： conda update conda 升级其所维护的相关库文件： conda update --all VSCode常用插件： Python：首先当然要推荐这个必备插件python了，提供了代码分析，高亮，规范化等很多基本功能，装好这个就可以开始愉快的写python了。 Anaconda Extension Pack 这个插件就推荐给用anaconda的同学了，大大增强了代码提示功能。原始的代码提示基本只包含了python标准库，有了这个插件之后各种第三方库基本都能实现代码提示了，并且还会额外显示每个方法的帮助。 vscode-iconsvscode现在虽然已经自带了文件图标，但是作为一个颜控还是觉得略丑，这个插件提供各种图标就非常漂亮了，推荐给各位颜控。 filesize一款在左下角显示文件大小的插件，还是挺实用的 Bracket Pair Colorizer代码颜色高亮一般只会帮你区分不同的变量，这款插件给不同的括号换上了不同的颜色，括号的多的时候非常实用。 Python常用库Web框架 Django 最牛的全栈的完整的框架，大而一 Flask 分散的全栈的插件的框架，小而美 Webpy 微框架，适合小项目 Tonardo 异步非阻塞式高性能的Web框架 web2py 全功能Web应用框架，像ROR 科学计算 Numpy 科学计算必学，很多库的依赖 Scipy 很少用到，不敢介绍 Pandas 支持表格等多维数据 协程(python 3.5) asyncio 内置了对异步IO的支持 aiohttp 单线程并发IO操作，实现多用户的高并发 机器学习 scikit-learn 最适合初学者学习的神经网络库 Theano 可以支持复杂的函数计算，很多神经网络的库都依赖着它 图像处理 pillow Python Imaging Library的分支 内置库 os 用于系统操作 path 文件路径 urlib 发送请求专用 subprocess 系统命令行控制 爬虫 requests 取代urllib成为接口调试利器 beautifulsoup html解析利器 文档 命令交互 ipython 交互命令行，适合科学计算 jupyter ipython notebook 的延伸，可以直接放在github上 生成文档 Apidoc Slate 作者：brandonxiang链接：https://www.jianshu.com/p/886cbabbfe9e Python快捷键（Pycharm） ctrl+N ：快速搜索 ctrl+ 空格 ： 快速填充名称 ctrl + 空格两次 ： 强制输入名称，同时添加相关的库 常用名词介绍 REPL : READ _ EVALUATE _ PRINT _ LOOP 就是可以直接在命令行里面进行输入输出在anaconda 里面输入 python ,即可以进入REPL模式；ctrl + Z 退出REPL 模式","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://Hunterforesee.github.io/tags/python/"},{"name":"HelloWorld","slug":"HelloWorld","permalink":"http://Hunterforesee.github.io/tags/HelloWorld/"}]}]}